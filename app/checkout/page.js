"use client";
import React, { useState, useEffect, useRef, Suspense } from "react";
import { loadStripe } from "@stripe/stripe-js";
import { Elements, PaymentElement, useStripe, useElements } from "@stripe/react-stripe-js";
import { ShoppingCart, CreditCard, Loader2, ArrowLeft } from "lucide-react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import ShippingAddress from "../../components/ShippingAddress";

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);

export default function CheckoutPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-white flex items-center justify-center">
        <Loader2 className="animate-spin text-purple-600" size={48} />
      </div>
    }>
      <CheckoutContent />
    </Suspense>
  );
}

function CheckoutContent() {
  const [clientSecret, setClientSecret] = useState("");
  const [orderId, setOrderId] = useState("");
  const [orderNumber, setOrderNumber] = useState("");
  const [designData, setDesignData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
  const hasInitialized = useRef(false);
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  const [shippingAddress, setShippingAddress] = useState(null);
  const [addressErrors, setAddressErrors] = useState({});
  const [isAddressReady, setIsAddressReady] = useState(false);
  const [shippingCost, setShippingCost] = useState(0);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  const calculateShippingCost = (country) => {
    switch(country) {
      case 'TH': return 50;  // ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
      case 'US': return 200; // ‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
      case 'GB': return 200; // ‡∏™‡∏´‡∏£‡∏≤‡∏ä‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£
      case 'AU': return 200; // ‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢
      case 'SG': return 100; // ‡∏™‡∏¥‡∏á‡∏Ñ‡πÇ‡∏õ‡∏£‡πå
      case 'JP': return 150; // ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
      case 'KR': return 150; // ‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ‡πÉ‡∏ï‡πâ
      default: return 150;   // ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    }
  };

  // ‚úÖ useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    if (hasInitialized.current) {
      console.log('‚ö†Ô∏è useEffect already called, skipping...');
      return;
    }
    hasInitialized.current = true;

    // Get design data from localStorage
    const savedDesign = localStorage.getItem('mica-checkout-data');
    
    if (!savedDesign) {
      setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà');
      setLoading(false);
      return;
    }

    const data = JSON.parse(savedDesign);
    setDesignData(data);
    setLoading(false); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  }, []);

  // ‚úÖ useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Payment Intent ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
  useEffect(() => {
    if (!designData || !isAddressReady) {
      console.log('‚è≥ Waiting for design data and shipping address...');
      return;
    }

    // ‚úÖ Check if Payment Intent already exists
    const savedPaymentData = localStorage.getItem('mica-payment-intent');
    if (savedPaymentData) {
      try {
        const paymentData = JSON.parse(savedPaymentData);
        console.log('‚ôªÔ∏è Using existing Payment Intent:', paymentData.orderNumber);
        setClientSecret(paymentData.clientSecret);
        setOrderId(paymentData.orderId);
        setOrderNumber(paymentData.orderNumber);
        return;
      } catch (err) {
        console.error('Error parsing saved payment data:', err);
        localStorage.removeItem('mica-payment-intent');
      }
    }

    // ‚úÖ Create new payment intent only if not exists
    console.log('üÜï Creating new Payment Intent with shipping address...');
    fetch('/api/stripe/create-payment-intent', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        amount: (designData.totalPrice + shippingCost) * 100, // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        customerInfo: {
          name: designData.customerName,
          email: designData.customerEmail,
          phone: designData.customerPhone
        },
        designData: {
          productType: 'mica-magnetic-photos',
          quantity: designData.quantity,
          imagePositions: designData.imagePositions,
          imageZoom: designData.imageZoom,
          selectedBackground: designData.selectedBackground,
          selectedSize: designData.selectedSize
        },
        fileUrls: designData.fileUrls,
        sceneUrl: designData.sceneUrl,
        shippingAddress: shippingAddress, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        shippingCost: shippingCost // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
      })
    })
    .then(res => res.json())
    .then(result => {
      if (result.error) {
        throw new Error(result.error);
      }
      
      // ‚úÖ Save Payment Intent to localStorage to prevent duplicate creation
      const paymentData = {
        clientSecret: result.clientSecret,
        orderId: result.orderId,
        orderNumber: result.orderNumber
      };
      localStorage.setItem('mica-payment-intent', JSON.stringify(paymentData));
      console.log('üíæ Payment Intent saved:', result.orderNumber);
      
      setClientSecret(result.clientSecret);
      setOrderId(result.orderId);
      setOrderNumber(result.orderNumber);
    })
    .catch(err => {
      setError(err.message);
    });
  }, [designData, isAddressReady, shippingAddress, shippingCost]); // ‚úÖ dependencies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payment Intent

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-white flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="animate-spin mx-auto mb-4 text-purple-600" size={48} />
          <p className="text-lg font-semibold">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-white flex items-center justify-center p-4">
        <div className="bg-white border-2 border-black rounded-xl p-8 max-w-md">
          <div className="text-center">
            <div className="text-6xl mb-4">‚ùå</div>
            <h2 className="text-2xl font-bold mb-2">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            <Link
              href="/mica-magnetic-photos"
              className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold rounded-lg hover:from-purple-700 hover:to-pink-700"
            >
              <ArrowLeft size={20} />
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-white">
      {/* Header */}
      <div className="bg-white border-b-2 border-black">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center justify-center gap-2">
              <CreditCard className="text-purple-600" size={32} />
              ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            </h1>
            <p className="text-gray-600">
              Order #{orderNumber}
            </p>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          
          {/* Left - Order Summary */}
          <div className="space-y-6">
            <div className="bg-white border-2 border-black rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <ShoppingCart size={20} />
                ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
              </h3>

              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</span>
                  <span className="font-semibold">Mica Magnetic Photos</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</span>
                  <span className="font-semibold">{designData?.quantity} ‡∏£‡∏π‡∏õ</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏Ç‡∏ô‡∏≤‡∏î:</span>
                  <span className="font-semibold">{designData?.sizeLabel}</span>
                </div>
                
                {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
                <div className="flex justify-between">
                  <span className="text-gray-600">‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</span>
                  <span className="font-semibold">‡∏ø{shippingCost}</span>
                </div>
                
                <div className="border-t-2 border-gray-200 pt-3 mt-3">
                  <div className="flex justify-between text-lg">
                    <span className="font-bold">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                    <span className="font-bold text-purple-600 text-2xl">
                      ‡∏ø{(designData?.totalPrice || 0) + shippingCost}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Customer Info */}
            <div className="bg-white border-2 border-black rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h3>
              
              <div className="space-y-2 text-sm">
                <div>
                  <span className="text-gray-600">‡∏ä‡∏∑‡πà‡∏≠:</span>
                  <span className="font-semibold ml-2">{designData?.customerName}</span>
                </div>
                <div>
                  <span className="text-gray-600">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
                  <span className="font-semibold ml-2">{designData?.customerEmail}</span>
                </div>
                {designData?.customerPhone && (
                  <div>
                    <span className="text-gray-600">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</span>
                    <span className="font-semibold ml-2">{designData?.customerPhone}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Shipping Address */}
            <ShippingAddress
              onAddressChange={(address) => {
                setShippingAddress(address);
                
                // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
                const cost = calculateShippingCost(address.country || 'TH');
                setShippingCost(cost);
                
                // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                const isComplete = address.recipient_name && 
                                  address.phone && 
                                  address.address_line_1 && 
                                  address.city && 
                                  address.province && 
                                  address.postal_code;
                
                console.log('üìç Address validation:', {
                  recipient_name: !!address.recipient_name,
                  phone: !!address.phone,
                  address_line_1: !!address.address_line_1,
                  city: !!address.city,
                  province: !!address.province,
                  postal_code: !!address.postal_code,
                  country: address.country,
                  shippingCost: cost,
                  isComplete
                });
                
                setIsAddressReady(isComplete);
              }}
              onValidationError={(errors) => {
                setAddressErrors(errors);
              }}
              provider="simple" // ‚úÖ ‡πÉ‡∏ä‡πâ Simple Form ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
              country="TH"
              required={true}
            />

          </div>

          {/* Right - Payment Form */}
          <div>
            <div className="bg-white border-2 border-black rounded-xl p-6   top-8">
              <h3 className="text-xl font-bold mb-6">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
              
              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
              {!isAddressReady && (
                <div className="bg-blue-50 border-2 border-blue-400 rounded-lg p-4 mb-6">
                  <div className="flex items-center gap-2">
                    <div className="text-blue-600">üìù</div>
                    <div>
                      <p className="font-semibold text-blue-800">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</p>
                      <p className="text-sm text-blue-700">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å (‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)</p>
                    </div>
                  </div>
                </div>
              )}
              
              {clientSecret && isAddressReady && (
                <Elements 
                  stripe={stripePromise} 
                  options={{ 
                    clientSecret,
                    appearance: {
                      theme: 'stripe',
                      variables: {
                        colorPrimary: '#9333ea',
                      }
                    }
                  }}
                >
                  <CheckoutForm orderId={orderId} orderNumber={orderNumber} />
                </Elements>
              )}
              
              {!clientSecret && isAddressReady && (
                <div className="text-center py-8">
                  <Loader2 className="animate-spin mx-auto mb-4 text-purple-600" size={32} />
                  <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function CheckoutForm({ orderId, orderNumber }) {
  const stripe = useStripe();
  const elements = useElements();
  const router = useRouter();
  const [isProcessing, setIsProcessing] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setIsProcessing(true);
    setErrorMessage(null);

    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        // ‚úÖ Don't send order_id, let order-success page fetch it from payment_intent
        return_url: `${window.location.origin}/order-success`,
      },
    });

    // This point will only be reached if there's an immediate error
    if (error) {
      setErrorMessage(error.message);
      setIsProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <PaymentElement />

      {errorMessage && (
        <div className="bg-red-50 border-2 border-red-500 rounded-lg p-4">
          <p className="text-red-700 text-sm">{errorMessage}</p>
        </div>
      )}

      <button
        type="submit"
        disabled={!stripe || isProcessing}
        className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold py-4 px-6 rounded-lg hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center gap-2"
      >
        {isProcessing ? (
          <>
            <Loader2 className="animate-spin" size={20} />
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...
          </>
        ) : (
          <>
            <CreditCard size={20} />
            ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          </>
        )}
      </button>

      <p className="text-xs text-gray-500 text-center">
        üîí ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Stripe
      </p>
    </form>
  );
}

