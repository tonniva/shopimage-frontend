import { PrismaClient } from "@prisma/client";

const globalForPrisma = globalThis;

// Priority: DIRECT_URL > POOLER_URL (Session Mode) > DATABASE_URL
// IMPORTANT: Prisma ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements ‡∏Å‡∏±‡∏ö Pooler (‡∏ó‡∏±‡πâ‡∏á Session ‡πÅ‡∏•‡∏∞ Transaction Mode)
// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements

// IMPORTANT: ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements (42P05, 26000) ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å Pooler
// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÅ‡∏ó‡∏ô POOLER_URL

let directUrl = process.env.DIRECT_URL || process.env.DATABASE_URL;
let poolerUrl = process.env.POOLER_URL;
// ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements
let databaseUrl = directUrl || poolerUrl;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Transaction Mode (pgbouncer=true) ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Session Mode
if (databaseUrl && databaseUrl.includes('postgresql://')) {
  try {
    const url = new URL(databaseUrl);
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pgbouncer=true (Transaction Mode) ‚Üí ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö prepared statements
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Session Mode (‡∏•‡∏ö pgbouncer=true) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Direct URL
    if (url.searchParams.get('pgbouncer') === 'true') {
      console.warn('‚ö†Ô∏è WARNING: Found pgbouncer=true (Transaction Mode) - Not compatible with Prisma prepared statements!');
      console.warn('‚ö†Ô∏è Removing pgbouncer=true parameter and using Session Mode instead');
      
      // ‡∏•‡∏ö pgbouncer=true
      url.searchParams.delete('pgbouncer');
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ connection string ‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ direct URL
      if (directUrl && !poolerUrl) {
        console.warn('‚ö†Ô∏è Falling back to DIRECT_URL to avoid prepared statement errors');
        databaseUrl = directUrl;
      } else {
        databaseUrl = url.toString();
        console.log('‚úÖ Fixed: Using Session Mode (removed pgbouncer=true)');
      }
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á URL string ‡πÄ‡∏õ‡πá‡∏ô URL object ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ñ‡πâ‡∏≤ databaseUrl ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    const finalUrl = new URL(databaseUrl);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Pooler ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (port 6543 ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ pooler.supabase.com)
    const isUsingPooler = databaseUrl.includes('pooler.supabase.com') || finalUrl.port === '6543';
    
    if (!finalUrl.searchParams.has('connection_limit')) {
      if (isUsingPooler) {
        // Pooler (Pro Plan Large = 800 connections) - ‡πÉ‡∏ä‡πâ 150 (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ buffer)
        finalUrl.searchParams.set('connection_limit', '150');
        console.warn('‚ö†Ô∏è Using Supabase Connection Pooler - Prisma ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements');
        console.warn('‚ö†Ô∏è ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÅ‡∏ó‡∏ô POOLER_URL');
        console.log('üîå Using Supabase Connection Pooler (Session Mode) - Pro Plan (150/800 connections available)');
      } else {
        // Direct connection (Pro Plan Large = 160 connections) - ‡πÉ‡∏ä‡πâ 100 (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
        finalUrl.searchParams.set('connection_limit', '100');
        console.log('‚úÖ Using Direct Database Connection - Pro Plan (100/160 connections available)');
        console.log('‚úÖ Direct URL ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements - Recommended!');
      }
    } else {
      // Log current configuration
      const currentLimit = finalUrl.searchParams.get('connection_limit');
      if (isUsingPooler) {
        console.warn(`‚ö†Ô∏è Using Supabase Connection Pooler with custom limit: ${currentLimit}`);
        console.warn('‚ö†Ô∏è ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÅ‡∏ó‡∏ô POOLER_URL');
      } else {
        console.log(`‚úÖ Using Direct Connection with custom limit: ${currentLimit} - Recommended!`);
      }
    }
    
    // Set pool timeout
    if (!finalUrl.searchParams.has('pool_timeout')) {
      finalUrl.searchParams.set('pool_timeout', '10'); // 10 seconds
    }
    
    // Set connect timeout
    if (!finalUrl.searchParams.has('connect_timeout')) {
      finalUrl.searchParams.set('connect_timeout', '10'); // 10 seconds
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ pgbouncer=true
    if (finalUrl.searchParams.get('pgbouncer') === 'true') {
      finalUrl.searchParams.delete('pgbouncer');
      console.warn('‚ö†Ô∏è Removed pgbouncer=true parameter (not compatible with Prisma)');
    }
    
    databaseUrl = finalUrl.toString();
  } catch (e) {
    console.warn('Could not parse database URL for connection pooling:', e.message);
  }
}

// Prisma Client configuration
// IMPORTANT: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Session Mode ‡∏´‡∏£‡∏∑‡∏≠ Direct URL ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Transaction Mode)
let prismaInstance = globalForPrisma.prisma ?? new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],
  datasources: {
    db: {
      url: databaseUrl,
    },
  },
});

// Export prisma with getter to ensure we always get the latest instance
export const prisma = new Proxy({}, {
  get: (target, prop) => {
    return prismaInstance[prop];
  }
});

// Force reconnect function to reset connection pool and clear prepared statements
async function forceReconnect() {
  try {
    console.log('üîÑ Force disconnecting Prisma client to reset connection pool...');
    await prismaInstance.$disconnect();
    
    // Wait a bit before reconnecting
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Recreate Prisma client
    prismaInstance = new PrismaClient({
      log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],
      datasources: {
        db: {
          url: databaseUrl,
        },
      },
    });
    
    // Update global reference
    if (process.env.NODE_ENV !== "production") {
      globalForPrisma.prisma = prismaInstance;
    }
    
    console.log('‚úÖ Prisma client reconnected successfully');
  } catch (reconnectError) {
    console.error('‚ùå Error during force reconnect:', reconnectError);
    // Continue anyway - Prisma will create connection on next query
  }
}

// Retry helper function for connection errors (P1001) ‡πÅ‡∏•‡∏∞ prepared statement errors (42P05)
export async function withRetry(fn, maxRetries = 3, delay = 1000) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      // Retry on connection errors (P1001)
      if (error.code === 'P1001' && i < maxRetries - 1) {
        const waitTime = delay * Math.pow(2, i); // Exponential backoff
        console.log(`‚ö†Ô∏è Database connection error (P1001), retrying in ${waitTime}ms... (${i + 1}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
        continue;
      }

      // Retry on pool timeout (P2024: Timed out fetching a new connection)
      if (error.code === 'P2024' && i < maxRetries - 1) {
        const waitTime = delay * Math.pow(2, i);
        console.warn(`‚ö†Ô∏è Pool timeout (P2024): waiting ${waitTime}ms then retry (${i + 1}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
        continue;
      }
      
      // Retry on prepared statement errors (42P05, 26000) - ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å Pooler
      // 42P05: "prepared statement already exists" - Transaction Mode
      // 26000: "prepared statement does not exist" - Session Mode (after reconnect)
      const isPreparedStatementError = 
        error.code === '42P05' || 
        error.code === '26000' ||
        (error.message && error.message.includes('prepared statement'));
      
      if (isPreparedStatementError && i < maxRetries - 1) {
        const waitTime = delay * Math.pow(2, i);
        console.error(`‚ö†Ô∏è Prepared statement error (${error.code || 'UNKNOWN'}) detected - Attempt ${i + 1}/${maxRetries}`);
        
        if (error.code === '42P05') {
          console.error(`‚ö†Ô∏è Error: "prepared statement already exists" - Transaction Mode (pgbouncer=true)`);
        } else if (error.code === '26000') {
          console.error(`‚ö†Ô∏è Error: "prepared statement does not exist" - Pooler issue after reconnect`);
        } else {
          console.error(`‚ö†Ô∏è Error: Prepared statement issue detected`);
        }
        
        console.error(`‚ö†Ô∏è SOLUTION: ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÅ‡∏ó‡∏ô POOLER_URL ‡πÉ‡∏ô Vercel Environment Variables`);
        console.error(`‚ö†Ô∏è Force reconnecting to reset connection pool...`);
        
        // Force reconnect to clear prepared statements cache
        await forceReconnect();
        
        console.error(`‚ö†Ô∏è Retrying query in ${waitTime}ms...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
        continue;
      } else if (isPreparedStatementError) {
        // Last retry failed - throw with helpful message
        console.error(`‚ùå All retry attempts failed for prepared statement error`);
        throw new Error(
          'Prepared statement error - Please fix connection URL:\n' +
          '1. ‡πÉ‡∏ä‡πâ DIRECT_URL ‡πÅ‡∏ó‡∏ô POOLER_URL ‡πÉ‡∏ô Vercel Environment Variables (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)\n' +
          '2. ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö POOLER_URL ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà DIRECT_URL\n' +
          '3. DIRECT_URL ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ prepared statements\n' +
          `Original error: ${error.message || error.code}`
        );
      }
      
      throw error;
    }
  }
}

if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = prismaInstance;
}

// Clean disconnect on module reload
if (process.env.NODE_ENV === 'development') {
  if (module.hot) {
    module.hot.dispose(async () => {
      await prisma.$disconnect();
    });
  }
}