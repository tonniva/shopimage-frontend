import { PrismaClient } from "@prisma/client";

// üß† ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak ‡πÉ‡∏ô Next.js dev mode
const globalForPrisma = globalThis;

// üß© 1Ô∏è‚É£ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á connection URL
//    - ‡πÉ‡∏ä‡πâ POOLER_URL (port 6543) ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
//    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÉ‡∏ä‡πâ DIRECT_URL (port 5432)
//    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí fallback ‡πÑ‡∏õ DATABASE_URL
let databaseUrl =
  process.env.POOLER_URL ||
  process.env.DIRECT_URL ||
  process.env.DATABASE_URL;

if (!databaseUrl) {
  throw new Error("‚ùå No DATABASE_URL or DIRECT_URL found in environment variables");
}

try {
  const url = new URL(databaseUrl);

  // üß© 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Pooler ‡∏´‡∏£‡∏∑‡∏≠ Direct
  const isUsingPooler =
    databaseUrl.includes("pooler.supabase.com") || url.port === "6543";

  // üß© 3Ô∏è‚É£ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Free plan
  if (!url.searchParams.has("connection_limit")) {
    // ‚ö†Ô∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel Free Plan
    url.searchParams.set("connection_limit", isUsingPooler ? "10" : "5");
  }

  if (!url.searchParams.has("pool_timeout"))
    url.searchParams.set("pool_timeout", "10");

  if (!url.searchParams.has("connect_timeout"))
    url.searchParams.set("connect_timeout", "10");

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö SSL (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supabase)
  url.searchParams.set("sslmode", "require");

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string
  databaseUrl = url.toString();

  console.log(
    `üîå Using ${
      isUsingPooler ? "Supabase Pooler" : "Direct Connection"
    } ‚Üí ${url.host}:${url.port} (limit=${
      url.searchParams.get("connection_limit") || "-"
    })`
  );
} catch (e) {
  console.warn("‚ö†Ô∏è Could not parse database URL:", e.message);
}

// üß© 4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma Client ‡πÅ‡∏ö‡∏ö singleton
export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log:
      process.env.NODE_ENV === "development"
        ? ["warn", "error"]
        : ["error"],
    datasources: {
      db: { url: databaseUrl },
    },
  });

// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô global (dev mode reuse)
if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = prisma;
}

// üß© 5Ô∏è‚É£ helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retry connection error
export async function withRetry(fn, maxRetries = 3, delay = 1000) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (error.code === "P1001" && i < maxRetries - 1) {
        const wait = delay * Math.pow(2, i);
        console.log(
          `‚ö†Ô∏è Prisma connection failed (P1001), retrying in ${wait}ms (${i + 1}/${maxRetries})`
        );
        await new Promise((res) => setTimeout(res, wait));
        continue;
      }
      throw error;
    }
  }
  throw new Error("‚ùå Database connection failed after retries");
}

// üß© 6Ô∏è‚É£ ‡∏õ‡∏¥‡∏î connection ‡πÄ‡∏ß‡∏•‡∏≤ hot reload (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ dev)
if (process.env.NODE_ENV === "development" && module.hot) {
  module.hot.dispose(async () => {
    await prisma.$disconnect();
  });
}