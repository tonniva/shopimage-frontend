import { PrismaClient } from "@prisma/client";

// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PrismaClient ‡∏ã‡πâ‡∏≥‡πÄ‡∏ß‡∏•‡∏≤ hot reload
const globalForPrisma = globalThis;

let databaseUrl =
  process.env.POOLER_URL ||
  process.env.DIRECT_URL ||
  process.env.DATABASE_URL;

if (!databaseUrl) {
  throw new Error("‚ùå No DATABASE_URL found in environment variables");
}

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏° parameter ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
if (databaseUrl.includes("postgresql://")) {
  try {
    const url = new URL(databaseUrl);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Pooler ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isUsingPooler =
      databaseUrl.includes("pooler.supabase.com") || url.port === "6543";

    // ‡∏ï‡∏±‡πâ‡∏á connection limit
    if (!url.searchParams.has("connection_limit")) {
      if (isUsingPooler) {
        url.searchParams.set("connection_limit", "150");
        console.log("üîå Using Supabase Connection Pooler (limit=150)");
      } else {
        url.searchParams.set("connection_limit", "100");
        console.log("üîå Using Direct DB Connection (limit=100)");
      }
    }

    // timeout ‡πÅ‡∏•‡∏∞ SSL
    if (!url.searchParams.has("pool_timeout")) {
      url.searchParams.set("pool_timeout", "10");
    }
    if (!url.searchParams.has("connect_timeout")) {
      url.searchParams.set("connect_timeout", "10");
    }
    if (!url.searchParams.has("sslmode")) {
      url.searchParams.set("sslmode", "require");
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string
    databaseUrl = url.toString();
  } catch (e) {
    console.warn("‚ö†Ô∏è Could not parse database URL:", e.message);
  }
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma client ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (re-use ‡πÑ‡∏î‡πâ)
export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: process.env.NODE_ENV === "development" ? ["warn", "error"] : ["error"],
    datasources: {
      db: { url: databaseUrl },
    },
  });

if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = prisma;
}

// ‚úÖ helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retry ‡∏ñ‡πâ‡∏≤ Prisma ‡∏ï‡πà‡∏≠ DB ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
export async function withRetry(fn, maxRetries = 3, delay = 1000) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (error.code === "P1001" && i < maxRetries - 1) {
        const waitTime = delay * Math.pow(2, i);
        console.log(
          `‚ö†Ô∏è Prisma connection failed (P1001), retrying in ${waitTime}ms (${i + 1}/${maxRetries})`
        );
        await new Promise((resolve) => setTimeout(resolve, waitTime));
        continue;
      }
      throw error;
    }
  }
  throw new Error("‚ùå Database connection failed after retries");
}

// ‚úÖ ‡∏õ‡∏¥‡∏î connection ‡∏ï‡∏≠‡∏ô reload ‡πÉ‡∏ô dev mode
if (process.env.NODE_ENV === "development" && module.hot) {
  module.hot.dispose(async () => {
    await prisma.$disconnect();
  });
}