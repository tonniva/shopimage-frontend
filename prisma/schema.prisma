// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// --------------------
/// Auth (NextAuth)
/// --------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  plan          Plan      @default(FREE)

  accounts      Account[]
  sessions      Session[]
  usages        UsageLog[]
  subscriptions Subscription?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Plan {
  FREE
  PRO
  BUSINESS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// --------------------
/// Usage / Subscription
/// --------------------
model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  count     Int      @default(1)
  bytes     Int      @default(0)
  status    String   @default("ok")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}

model Subscription {
  id         String  @id @default(cuid())
  userId     String  @unique
  plan       Plan
  renewsAt   DateTime
  status     String  @default("active")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}