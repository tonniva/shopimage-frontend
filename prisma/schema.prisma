generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// --------------------
/// Auth (NextAuth)
/// --------------------
model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  passwordHash    String?
  plan            Plan             @default(FREE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  propertyReports PropertyReport[]
  sessions        Session[]
  subscriptions   Subscription?
  usages          UsageLog[]
  propertyHeaders PropertySnapHeader[]

  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

/// --------------------
/// Usage / Subscription
/// --------------------
model UsageLog {
  id     String   @id @default(cuid())
  userId String
  date   DateTime @default(now())
  count  Int      @default(1)
  bytes  Int      @default(0)
  status String   @default("ok")
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@schema("public")
}

model Subscription {
  id       String   @id @default(cuid())
  userId   String   @unique
  plan     Plan
  renewsAt DateTime
  status   String   @default("active")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_authorizations {
  id                    String                     @id @db.Uuid
  authorization_id      String                     @unique
  client_id             String                     @db.Uuid
  user_id               String?                    @db.Uuid
  redirect_uri          String
  scope                 String
  state                 String?
  resource              String?
  code_challenge        String?
  code_challenge_method code_challenge_method?
  response_type         oauth_response_type        @default(code)
  status                oauth_authorization_status @default(pending)
  authorization_code    String?                    @unique
  created_at            DateTime                   @default(now()) @db.Timestamptz(6)
  expires_at            DateTime                   @default(dbgenerated("(now() + '00:03:00'::interval)")) @db.Timestamptz(6)
  approved_at           DateTime?                  @db.Timestamptz(6)
  oauth_clients         oauth_clients              @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_clients {
  id                   String                  @id @db.Uuid
  client_secret_hash   String?
  registration_type    oauth_registration_type
  redirect_uris        String
  grant_types          String
  client_name          String?
  client_uri           String?
  logo_uri             String?
  created_at           DateTime                @default(now()) @db.Timestamptz(6)
  updated_at           DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at           DateTime?               @db.Timestamptz(6)
  client_type          oauth_client_type       @default(confidential)
  oauth_authorizations oauth_authorizations[]
  oauth_consents       oauth_consents[]
  sessions             sessions[]

  @@index([deleted_at])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_consents {
  id            String        @id @db.Uuid
  user_id       String        @db.Uuid
  client_id     String        @db.Uuid
  scopes        String
  granted_at    DateTime      @default(now()) @db.Timestamptz(6)
  revoked_at    DateTime?     @db.Timestamptz(6)
  oauth_clients oauth_clients @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, client_id], map: "oauth_consents_user_client_unique")
  @@index([user_id, granted_at(sort: Desc)], map: "oauth_consents_user_order_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id              String           @id @db.Uuid
  user_id         String           @db.Uuid
  created_at      DateTime?        @db.Timestamptz(6)
  updated_at      DateTime?        @db.Timestamptz(6)
  factor_id       String?          @db.Uuid
  aal             aal_level?
  not_after       DateTime?        @db.Timestamptz(6)
  refreshed_at    DateTime?        @db.Timestamp(6)
  user_agent      String?
  ip              String?          @db.Inet
  tag             String?
  oauth_client_id String?          @db.Uuid
  mfa_amr_claims  mfa_amr_claims[]
  refresh_tokens  refresh_tokens[]
  oauth_clients   oauth_clients?   @relation(fields: [oauth_client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([oauth_client_id])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  disabled          Boolean?
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@index([resource_id], map: "sso_providers_resource_id_pattern_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?                @db.Uuid
  id                          String                 @id @db.Uuid
  aud                         String?                @db.VarChar(255)
  role                        String?                @db.VarChar(255)
  email                       String?                @db.VarChar(255)
  encrypted_password          String?                @db.VarChar(255)
  email_confirmed_at          DateTime?              @db.Timestamptz(6)
  invited_at                  DateTime?              @db.Timestamptz(6)
  confirmation_token          String?                @db.VarChar(255)
  confirmation_sent_at        DateTime?              @db.Timestamptz(6)
  recovery_token              String?                @db.VarChar(255)
  recovery_sent_at            DateTime?              @db.Timestamptz(6)
  email_change_token_new      String?                @db.VarChar(255)
  email_change                String?                @db.VarChar(255)
  email_change_sent_at        DateTime?              @db.Timestamptz(6)
  last_sign_in_at             DateTime?              @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?              @db.Timestamptz(6)
  updated_at                  DateTime?              @db.Timestamptz(6)
  phone                       String?                @unique
  phone_confirmed_at          DateTime?              @db.Timestamptz(6)
  phone_change                String?                @default("")
  phone_change_token          String?                @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?              @db.Timestamptz(6)
  confirmed_at                DateTime?              @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?                @default("") @db.VarChar(255)
  email_change_confirm_status Int?                   @default(0) @db.SmallInt
  banned_until                DateTime?              @db.Timestamptz(6)
  reauthentication_token      String?                @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?              @db.Timestamptz(6)
  is_sso_user                 Boolean                @default(false)
  deleted_at                  DateTime?              @db.Timestamptz(6)
  is_anonymous                Boolean                @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  oauth_authorizations        oauth_authorizations[]
  oauth_consents              oauth_consents[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  orders                      orders[]
  profiles                    profiles?
  usage_log                   usage_log[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model orders {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_number          String    @unique @db.VarChar(50)
  user_id               String?   @db.Uuid
  customer_name         String    @db.VarChar(255)
  customer_email        String    @db.VarChar(255)
  customer_phone        String?   @db.VarChar(50)
  product_type          String    @db.VarChar(50)
  quantity              Int
  total_price           Decimal   @db.Decimal(10, 2)
  stripe_payment_intent String?   @db.VarChar(255)
  stripe_payment_id     String?   @unique @db.VarChar(255)
  payment_status        String?   @default("pending") @db.VarChar(20)
  paid_at               DateTime? @db.Timestamptz(6)
  design_data           Json?
  file_urls             String[]
  scene_url             String?
  scene_storage_path    String?
  production_status     String?   @default("pending") @db.VarChar(20)
  notes                 String?
  shipping_address      Json?
  tracking_number       String?   @db.VarChar(100)
  shipped_at            DateTime? @db.Timestamptz(6)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  shipping_cost         Decimal?  @default(0) @db.Decimal(10, 2)
  users                 users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_orders_created_at")
  @@index([customer_email], map: "idx_orders_customer_email")
  @@index([order_number], map: "idx_orders_order_number")
  @@index([payment_status], map: "idx_orders_payment_status")
  @@index([production_status], map: "idx_orders_production_status")
  @@index([stripe_payment_intent], map: "idx_orders_stripe_payment_intent")
  @@index([user_id], map: "idx_orders_user_id")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id          String   @id @db.Uuid
  email       String?
  plan        String   @default("free")
  quota_day   Int      @default(20)
  quota_month Int      @default(1000)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model usage_log {
  id         BigInt   @id @default(autoincrement())
  user_id    String   @db.Uuid
  action     String   @default("convert")
  amount     Int      @default(1)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// --------------------
/// Property Snap
/// --------------------
model PropertyReport {
  id               String   @id @default(cuid())
  userId           String
  title            String
  description      String?
  locationLat      Float
  locationLng      Float
  address          String?
  formattedAddress String?
  userImages       Json
  googlePhotos     Json?
  nearbyPlaces     Json?
  streetViewData   Json?
  mapsData         Json?
  aiInsights       Json?
  transportation   Json?
  viewCount        Int      @default(0)
  shareCount       Int      @default(0)
  shareToken       String   @unique
  isPublic         Boolean  @default(true)
  status           String   @default("ACTIVE")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  area             Decimal?
  bathrooms        Int?
  bedrooms         Int?
  buildingAge      Int?
  floors           Int?
  landArea         Decimal?
  listingType      String?
  price            Decimal?
  propertyType     String?
  contactEmail     String?
  contactLine      String?
  contactPhone     String?
  province         String?
  region           String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([shareToken])
  @@index([locationLat, locationLng])
  @@schema("public")
}

model PropertySnapHeader {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  url       String
  path      String
  order     Int      @default(0)
  autoSlide Boolean  @default(true)
  slideDelay Int     @default(5000)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@schema("public")
}

enum Plan {
  FREE
  PRO
  BUSINESS

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum oauth_authorization_status {
  pending
  approved
  denied
  expired

  @@schema("auth")
}

enum oauth_client_type {
  public
  confidential

  @@schema("auth")
}

enum oauth_registration_type {
  dynamic
  manual

  @@schema("auth")
}

enum oauth_response_type {
  code

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
